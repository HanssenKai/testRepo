affinity: {}

# ArgoCD dashboard url; used in place of {{.context.argocdUrl}} in templates
argocdUrl: http://argocd-server

fullnameOverride: ""

image:
  repository: argoprojlabs/argocd-notifications
  tag: v1.1.1
  pullPolicy: IfNotPresent

imagePullSecrets: []

nameOverride: "argocd-notifications"

nodeSelector: {}

updateStrategy:
  type: Recreate

context:
  # Add custom values into context
  #  region: east
  #  environmentName: staging

secret:
  # Whether helm chart creates controller secret
  create: false

  items:

logLevel: info

extraArgs: []

metrics:
  enabled: false
  port: 9001
  service:
    annotations: {}
    labels: {}
  serviceMonitor:
    enabled: false
    additionalLabels: {}
    # namespace: monitoring
    # interval: 30s
    # scrapeTimeout: 10s

# Additional container environment variables
extraEnv: []

notifiers:
# For more information: https://argocd-notifications.readthedocs.io/en/stable/services/overview/

  service.webhook.change-webhook: |
    url: http://http-echo:8888
    

podAnnotations: {}

## Pod Security Context
securityContext:
  runAsNonRoot: true

## Container Security Context
containerSecurityContext: {}

resources: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true

  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: argocd-notifications-controller
  annotations: {}

cm:
  # Whether helm chart creates controller config map
  create: true

subscriptions:
  - recipients:
    triggers:
    - test-trigger

templates:
  template.change-start-template: |
    webhook:
      change-webhook:
        method: POST
        body: |
          {
            "status": "Sync started",
            "sync status": "{{.app.status.sync.status}}",
            "repo": "{{.app.spec.source.repoURL}}",
          }
  template.change-end-template: |
    webhook:
      change-webhook:
        method: POST
        body: |
          {
            "status": "Sync succeded",
            "sync status": "{{.app.status.sync.status}}",
            "repo": "{{.app.spec.source.repoURL}}",
          }
  template.change-failed-template: |
    webhook:
      change-webhook:
        method: POST
        body: |
          {
            "status": "Sync failed",
            "sync status": "{{.app.status.sync.status}}",
            "repo": "{{.app.spec.source.repoURL}}",
          }
#{ "Time":"2021-04-02 09:48:49 UTC",  "Action":"Deploy started",  "ServiceName":"Persontjenesten", "ServiceComponent":"FhirLoader", "ReleaseId":"3544", "ReleaseName":"Release-373", "ReleaseWebUrl":"https://dev.azure.com/NorskHelsenettUtvikling/0xxxxxxxx", "Version":"20210326.2" }

  
tolerations: []

triggers:
  trigger.change-trigger: |
    - when: app.status.operationState.phase in ['Running']
      send:
      - change-start-template
    - when: app.status.operationState.phase in ['Succeeded']
      send:
      - change-end-template
    - when: app.status.operationState.phase in ['Failed', 'Error']
      send:
      - change-failed-template



bots:
  # For more information: https://argocd-notifications.readthedocs.io/en/stable/bots/overview/
  slack:
    # You have to set secret.notifiers.slack.signingSecret
    enabled: false

    updateStrategy:
      type: Recreate

    image:
      repository: argoprojlabs/argocd-notifications
      tag: v1.1.1
      pullPolicy: IfNotPresent

    imagePullSecrets: []

    service:
      annotations: {}
      port: 80
      type: LoadBalancer

    serviceAccount:
      # Specifies whether a service account should be created
      create: true

      # The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template
      name: argocd-notifications-bot

      annotations: {}

    resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

    affinity: {}

    tolerations: []

    nodeSelector: {}
